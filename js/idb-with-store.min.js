"use strict";!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,r){var o,i=new Promise(function(i,s){e(o=t[n].apply(t,r)).then(i,s)});return i.request=o,i}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return t(this[n],o,arguments)})})}function o(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function i(e,n,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[n],(r=t(e,o,arguments)).then(function(e){if(e)return new u(e,r.request)});var e,r})})}function s(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function a(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function p(e){this._db=e}n(s,"_index",["name","keyPath","multiEntry","unique"]),r(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),i(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(u,"_cursor",["direction","key","primaryKey","value"]),r(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(u.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(e){if(e)return new u(e,n._request)})})})}),c.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(c,"_store",["name","keyPath","indexNames","autoIncrement"]),r(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),i(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(c,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},n(a,"_tx",["objectStoreNames","mode"]),o(a,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},n(d,"_db",["name","version","objectStoreNames"]),o(d,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},n(p,"_db",["name","version","objectStoreNames"]),o(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,i=o[e].apply(o,n.slice(0,-1));i.onsuccess=function(){r(i.result)}})})}),[s,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var f={open:function(e,n,r){var o=t(indexedDB,"open",[e,n]),i=o.request;return i&&(i.onupgradeneeded=function(e){r&&r(new d(i.result,e.oldVersion,i.transaction))}),o.then(function(e){return new p(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=f,module.exports.default=module.exports):self.idb=f}();class __store{prefy(e){return`${this.__prefex}_${e}`}constructor(e,{prefex:t="store"}={}){this.__db={},this.__prefex=t;for(let{name:t,ver:n,keyPath:r,index:o}of e)t=this.prefy(t),this.__db[t]=idb.open(t,n,e=>{if(!e.objectStoreNames.contains(t)){const n=e.createObjectStore(t,{keyPath:r});o&&("string"==typeof o?n.createIndex(`by-${o}`,o):o.forEach(e=>{n.createIndex(`by-${e}`,e)}))}})}db(e){return this.__db[this.prefy(e)]}add(e,t){if(!((e=this.prefy(e))in this.__db))throw new Error(`db "${e}" not found!`);return this.__db[e].then(n=>{const r=n.transaction(e,"readwrite");return r.objectStore(e).put(t),r.complete})}ob(e){return e=this.prefy(e),this.__db[e].then(t=>t.transaction(e,"readwrite").objectStore(e))}addAll(e,t){return Promise.all(t.map(t=>this.add(e,t)))}getAllById(e,t){return e=this.prefy(e),this.__db[e].then(n=>n.transaction(e).objectStore(e).getAll(t))}getAllByIndex(e,t){return e=this.prefy(e),this.__db[e].then(n=>n.transaction(e).objectStore(e).index(`by-${t}`).getAll())}getAll(e){if(!((e=this.prefy(e))in this.__db))throw new Error(`db "${e}" not found!`);return this.__db[e].then(t=>{if(!t)return;return t.transaction(e).objectStore(e).getAll()})}del(e,t){return e=this.prefy(e),this.__db[e].then(t=>t.transaction(e,"readwrite").objectStore(e).openCursor()).then(function e(n){if(n)return t.includes(n.value._$id)&&n.delete(),n.continue().then(e)})}}const store=new __store([{name:"restaurants",keyPath:"id",ver:1,index:"id"},{name:"reviews",keyPath:"id",ver:1,index:["id","restaurant_id"]},{name:"offline-reviews",ver:1,keyPath:"_$id"}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
