"use strict";!function(){function e(e){return new Promise(function(t,r){e.onsuccess=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function t(t,r,n){var o,i=new Promise(function(i,s){e(o=t[r].apply(t,n)).then(i,s)});return i.request=o,i}function r(e,t,r){r.forEach(function(r){Object.defineProperty(e.prototype,r,{get:function(){return this[t][r]},set:function(e){this[t][r]=e}})})}function n(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return t(this[r],o,arguments)})})}function o(e,t,r,n){n.forEach(function(n){n in r.prototype&&(e.prototype[n]=function(){return this[t][n].apply(this[t],arguments)})})}function i(e,r,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return e=this[r],(n=t(e,o,arguments)).then(function(e){if(e)return new c(e,n.request)});var e,n})})}function s(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function a(e){this._store=e}function u(e){this._tx=e,this.complete=new Promise(function(t,r){e.oncomplete=function(){t()},e.onerror=function(){r(e.error)},e.onabort=function(){r(e.error)}})}function d(e,t,r){this._db=e,this.oldVersion=t,this.transaction=new u(r)}function _(e){this._db=e}r(s,"_index",["name","keyPath","multiEntry","unique"]),n(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),i(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(c,"_cursor",["direction","key","primaryKey","value"]),n(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(c.prototype[t]=function(){var r=this,n=arguments;return Promise.resolve().then(function(){return r._cursor[t].apply(r._cursor,n),e(r._request).then(function(e){if(e)return new c(e,r._request)})})})}),a.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},a.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(a,"_store",["name","keyPath","indexNames","autoIncrement"]),n(a,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),i(a,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),o(a,"_store",IDBObjectStore,["deleteIndex"]),u.prototype.objectStore=function(){return new a(this._tx.objectStore.apply(this._tx,arguments))},r(u,"_tx",["objectStoreNames","mode"]),o(u,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new a(this._db.createObjectStore.apply(this._db,arguments))},r(d,"_db",["name","version","objectStoreNames"]),o(d,"_db",IDBDatabase,["deleteObjectStore","close"]),_.prototype.transaction=function(){return new u(this._db.transaction.apply(this._db,arguments))},r(_,"_db",["name","version","objectStoreNames"]),o(_,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[a,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,r=(t=arguments,Array.prototype.slice.call(t)),n=r[r.length-1],o=this._store||this._index,i=o[e].apply(o,r.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[s,a].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var r=this,n=[];return new Promise(function(o){r.iterateCursor(e,function(e){e?(n.push(e.value),void 0===t||n.length!=t?e.continue():o(n)):o(n)})})})});var f={open:function(e,r,n){var o=t(indexedDB,"open",[e,r]),i=o.request;return i&&(i.onupgradeneeded=function(e){n&&n(new d(i.result,e.oldVersion,i.transaction))}),o.then(function(e){return new _(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=f,module.exports.default=module.exports):self.idb=f}();class __$store{constructor(){this.__db={};const e="store_restaurants";this.__db.rests=idb.open(e,1,function(t){if(!t.objectStoreNames.contains(e)){t.createObjectStore(e,{keyPath:"id"}).createIndex("by-id","id")}}),this.__db.revs=idb.open("store_reviews",1,function(e){if(!e.objectStoreNames.contains("store_reviews")){const t=e.createObjectStore("store_reviews",{keyPath:"id"});t.createIndex("by-id","id"),t.createIndex("by-restaurant_id","restaurant_id")}}),this.__db.off_revs=idb.open("store_offline-reviews",1,function(e){if(!e.objectStoreNames.contains("store_offline-reviews")){e.createObjectStore("store_offline-reviews",{keyPath:"_$id"})}})}getAllRest(){const e="store_restaurants";return this.__db.rests.then(t=>t.transaction(e).objectStore(e).getAll())}getAllRevsByRestId(e){const t="store_reviews";return this.__db.revs.then(r=>r.transaction(t).objectStore(t).index("by-restaurant_id").getAll(e))}getAllRevsByRestId_from_offline(e){return this.__db.off_revs.then(t=>t.transaction(name).objectStore(name).index("by-restaurant_id").getAll(e))}add(e,t){if(!((e="store_"+e)in this.__db))throw new Error(`${e} is invalid db`);return this.__db[e].then(r=>{const n=r.transaction(e,"readwrite");return n.objectStore(e).put(t),n.complete})}addAll(e,t){return Promise.all(t.map(t=>this.add(e,t)))}ob(e){if(!((e="store_"+e)in this.__db))throw new Error(`${e} is invalid db`);return this.__db[e].then(t=>t.transaction(e,"readwrite").objectStore(e))}}class __store{prefy(e){return`${this.__prefex}_${e}`}constructor(e,{prefex:t="store"}={}){this.__db={},this.__prefex=t;for(let{name:t,ver:r,keyPath:n,index:o}of e)t=this.prefy(t),this.__db[t]=idb.open(t,r,e=>{if(!e.objectStoreNames.contains(t)){const r=e.createObjectStore(t,{keyPath:n});o&&("string"==typeof o?r.createIndex(`by-${o}`,o):o.forEach(e=>{r.createIndex(`by-${e}`,e)}))}})}db(e){return this.__db[this.prefy(e)]}add(e,t){if(!((e=this.prefy(e))in this.__db))throw new Error(`db "${e}" not found!`);return this.__db[e].then(r=>{const n=r.transaction(e,"readwrite");return n.objectStore(e).put(t),n.complete})}ob(e){return e=this.prefy(e),this.__db[e].then(t=>t.transaction(e,"readwrite").objectStore(e))}addAll(e,t){return Promise.all(t.map(t=>this.add(e,t)))}getAllById(e,t){return e=this.prefy(e),this.__db[e].then(r=>r.transaction(e).objectStore(e).getAll(t))}getAllByIndex(e,t){return e=this.prefy(e),this.__db[e].then(r=>r.transaction(e).objectStore(e).index(`by-${t}`).getAll())}getAll(e){if(!((e=this.prefy(e))in this.__db))throw new Error(`db "${e}" not found!`);return this.__db[e].then(t=>{if(!t)return;return t.transaction(e).objectStore(e).getAll()})}del(e,t){return e=this.prefy(e),this.__db[e].then(t=>t.transaction(e,"readwrite").objectStore(e).openCursor()).then(function e(r){if(r)return t.includes(r.value._$id)&&r.delete(),r.continue().then(e)})}}const store=new __store([{name:"restaurants",keyPath:"id",ver:1,index:"id"},{name:"reviews",keyPath:"id",ver:1,index:["id","restaurant_id"]},{name:"offline-reviews",ver:1,keyPath:"_$id"}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
